.TH "businessLogic.FacadeImplementationWS" 3 "Tue Mar 12 2019" "Version 1" "Rural_House" \" -*- nroff -*-
.ad l
.nh
.SH NAME
businessLogic.FacadeImplementationWS
.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBbusinessLogic\&.ApplicationFacadeInterfaceWS\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBFacadeImplementationWS\fP ()"
.br
.ti -1c
.RI "\fBOffer\fP \fBcreateOffer\fP (\fBRuralHouse\fP ruralHouse, Date firstDay, Date lastDay, float price)  throws OverlappingOfferExists, BadDates  	"
.br
.RI "This method creates an offer with a house number, first day, last day and price\&. "
.ti -1c
.RI "Vector< \fBRuralHouse\fP > \fBgetAllRuralHouses\fP ()"
.br
.RI "This method creates a book with a corresponding parameters\&. "
.ti -1c
.RI "Vector< \fBOffer\fP > \fBgetOffers\fP (\fBRuralHouse\fP rh, Date firstDay, Date lastDay)"
.br
.RI "This method obtains the offers of a ruralHouse in the provided dates\&. "
.ti -1c
.RI "void \fBinitializeBD\fP ()"
.br
.ti -1c
.RI "void \fBbookOffer\fP (\fBOffer\fP bookOffer)"
.br
.ti -1c
.RI "boolean \fBcoincide\fP (\fBRuralHouse\fP houseCode, Date firstDay, Date lastDay)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Definition at line 22 of file FacadeImplementationWS\&.java\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "businessLogic\&.FacadeImplementationWS\&.FacadeImplementationWS ()"

.PP
Definition at line 29 of file FacadeImplementationWS\&.java\&.
.PP
.nf
30     {
31 
32     }
.fi
.SH "Member Function Documentation"
.PP 
.SS "void businessLogic\&.FacadeImplementationWS\&.bookOffer (\fBOffer\fP bookOffer)"

.PP
Implements \fBbusinessLogic\&.ApplicationFacadeInterfaceWS\fP\&.
.PP
Definition at line 120 of file FacadeImplementationWS\&.java\&.
.PP
.nf
121     {
122         HibernateDataAccess HDA = new HibernateDataAccess();
123         HDA\&.bookOffer(bookOffer);
124     }
.fi
.PP
References dataAccess\&.HibernateDataAccess\&.bookOffer()\&.
.SS "boolean businessLogic\&.FacadeImplementationWS\&.coincide (\fBRuralHouse\fP houseCode, Date firstDay, Date lastDay)"

.PP
Implements \fBbusinessLogic\&.ApplicationFacadeInterfaceWS\fP\&.
.PP
Definition at line 127 of file FacadeImplementationWS\&.java\&.
.PP
.nf
128     {
129         HibernateDataAccess HDA = new HibernateDataAccess();
130         boolean a = HDA\&.coincide(houseCode, firstDay, lastDay);
131         return a;
132     }
.fi
.PP
References dataAccess\&.HibernateDataAccess\&.coincide()\&.
.SS "\fBOffer\fP businessLogic\&.FacadeImplementationWS\&.createOffer (\fBRuralHouse\fP ruralHouse, Date firstDay, Date lastDay, float price) throws \fBOverlappingOfferExists\fP, \fBBadDates\fP"

.PP
This method creates an offer with a house number, first day, last day and price\&. 
.PP
\fBParameters:\fP
.RS 4
\fIHouse\fP number, start day, last day and price 
.RE
.PP
\fBReturns:\fP
.RS 4
the created offer, or null, or an exception 
.RE
.PP

.PP
Implements \fBbusinessLogic\&.ApplicationFacadeInterfaceWS\fP\&.
.PP
Definition at line 42 of file FacadeImplementationWS\&.java\&.
.PP
.nf
44     {
45         HibernateDataAccess dbManager = new HibernateDataAccess();
46         Offer o = null;
47 
48         if (firstDay\&.compareTo(lastDay) >= 0) 
49         {
50             throw new BadDates();
51         }
52 
53         boolean b = dbManager\&.existsOverlappingOffer(ruralHouse, firstDay, lastDay);
54         if (!b)
55             o = dbManager\&.createOffer(ruralHouse, firstDay, lastDay, price);
56         return o;
57 
58     }
.fi
.PP
References dataAccess\&.HibernateDataAccess\&.createOffer(), and dataAccess\&.HibernateDataAccess\&.existsOverlappingOffer()\&.
.SS "Vector<\fBRuralHouse\fP> businessLogic\&.FacadeImplementationWS\&.getAllRuralHouses ()"

.PP
This method creates a book with a corresponding parameters\&. 
.PP
\fBParameters:\fP
.RS 4
\fIFirst\fP day, last day, house number and telephone 
.RE
.PP
\fBReturns:\fP
.RS 4
a bookThis method retrieves the existing rural houses
.PP
a Set of rural houses 
.RE
.PP

.PP
Implements \fBbusinessLogic\&.ApplicationFacadeInterfaceWS\fP\&.
.PP
Definition at line 60 of file FacadeImplementationWS\&.java\&.
.PP
.nf
61     {
62         HibernateDataAccess dbManager = new HibernateDataAccess();
63         Vector<RuralHouse> ruralHouses = dbManager\&.getAllRuralHouses();
64         return ruralHouses;
65     }
.fi
.PP
References dataAccess\&.HibernateDataAccess\&.getAllRuralHouses()\&.
.SS "Vector<\fBOffer\fP> businessLogic\&.FacadeImplementationWS\&.getOffers (\fBRuralHouse\fP rh, Date firstDay, Date lastDay)"

.PP
This method obtains the offers of a ruralHouse in the provided dates\&. 
.PP
\fBParameters:\fP
.RS 4
\fIruralHouse,the\fP ruralHouse to inspect 
.br
\fIfirstDay,first\fP day in a period range 
.br
\fIlastDay,last\fP day in a period range 
.RE
.PP
\fBReturns:\fP
.RS 4
the first offer that overlaps with those dates, or null if there is no overlapping offer 
.RE
.PP

.PP
Implements \fBbusinessLogic\&.ApplicationFacadeInterfaceWS\fP\&.
.PP
Definition at line 81 of file FacadeImplementationWS\&.java\&.
.PP
.nf
82     {
83         HibernateDataAccess dbManager = new HibernateDataAccess();
84         Vector<Offer> offers = new Vector<Offer>();
85         offers = dbManager\&.getOffers(rh, firstDay, lastDay);
86         return offers;
87     }
.fi
.PP
References dataAccess\&.HibernateDataAccess\&.getOffers()\&.
.SS "void businessLogic\&.FacadeImplementationWS\&.initializeBD ()"

.PP
Implements \fBbusinessLogic\&.ApplicationFacadeInterfaceWS\fP\&.
.PP
Definition at line 89 of file FacadeImplementationWS\&.java\&.
.PP
.nf
90     {
91         Session session = HibernateUtil\&.getSessionFactory()\&.getCurrentSession();
92         session\&.beginTransaction();
93         try 
94         {
95             @SuppressWarnings("unchecked")
96             List<RuralHouse> query = session\&.createQuery("FROM RuralHouse")\&.list();
97             Iterator<RuralHouse> i = query\&.iterator();
98             while (i\&.hasNext()) 
99             {
100                 RuralHouse rh = i\&.next();
101                 session\&.delete(rh);
102             }
103             RuralHouse rh1 = new RuralHouse("Ezkioko etxea", "Ezkio");
104             RuralHouse rh2 = new RuralHouse("Etxetxikia", "Iruna");
105             RuralHouse rh3 = new RuralHouse("Udaletxea", "Bilbo");
106             RuralHouse rh4 = new RuralHouse("Gaztetxea", "Renteria");
107             session\&.save(rh1);
108             session\&.save(rh2);
109             session\&.save(rh3);
110             session\&.save(rh4);
111             session\&.getTransaction()\&.commit();
112             System\&.out\&.println("Db initialized");
113         } 
114         catch (Exception e) 
115         {
116             e\&.printStackTrace();
117         }
118     }
.fi
.PP
References modelo\&.dominio\&.HibernateUtil\&.getSessionFactory()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Rural_House from the source code\&.
